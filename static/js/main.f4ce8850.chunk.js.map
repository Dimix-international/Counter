{"version":3,"sources":["Counter/Components/ModalWindow/ModalWindow.module.css","Counter/Components/SuperSelect/SuperSelect.module.css","Counter/Counter.module.css","Counter/Components/AutoPlay/AutoPlay.module.css","Counter/Components/Button/Button.module.css","Counter/Components/SuperInput/SuperInput.module.css","Counter/Components/SuperRange/SuperRange.module.css","Counter/Components/Area/Area.module.css","Counter/Redux/actions.ts","Counter/Components/Area/Area.tsx","Counter/Components/Button/Button.tsx","Counter/Components/SuperInput/SuperInput.tsx","Counter/Components/SuperSelect/SuperSelect.tsx","Counter/Components/AutoPlay/AutoPlay.tsx","Counter/Components/SuperRange/SuperRange.tsx","Counter/Components/ModalWindow/ModalWindow.tsx","Counter/Components/ModalWindow/ModalWindowContainer.tsx","Counter/Counter.tsx","Counter/CounterContainer.tsx","Counter/utils/speedCounterWhenAutoplay.ts","App.tsx","reportWebVitals.ts","Counter/Redux/counter_reducer.ts","Counter/Redux/store.ts","Counter/utils/localStorage_util.ts","index.tsx"],"names":["module","exports","ACTIONS_TYPE","Area","React","memo","props","maxValue","classMaxValue","value","finalClass","s","area","className","Button","clName","disabled","title","callback","autoPlayOption","btn","onClick","play","setCurrentValueAC","currentValue","type","SET_CURRENT_VALUE","increaseCurrentValueAC","INCREASE_CURRENT_VALUE","decreaseCurrentValueAC","DECREASE_CURRENT_VALUE","SuperInput","error","setError","useState","tempValue","setTempValue","finallyClass","input","onChange","e","currentTarget","isFinite","Number","data-name","dataName","SuperSelect","data","startMode","hoverElementID","setHoverElementID","active","setActive","selectedItem","find","d","hoveredItem","useEffect","finalClassSelect","select","finalClassSelectTitle","item","tabIndex","onBlur","body","map","hover","onMouseEnter","id","AutoPlay","startValueAutoPlay","advise","setAdvise","container","onMouseLeave","SuperRange","bgcTrack","percent1","style","background","track","min","max","step","ModalWindow","onKeyPress","closeModal","start","finish","onChangeValue","autoPlay","setAutoPlay","speed","setSpeed","optionOfWork","conditionOfWork","setConditionOfWork","setData","onKeyUp","modal","dialog","header","header__content","close","data__title","mode","mode__title","mode_margin","speed__body","speed__title","range","btn__accept","ModalWindowContainer","setModal","startValue","finishValue","speedAutoplayOption","setStart","setFinish","condition","setCondition","useSelector","state","counter","optionsOfWork","dispatch","useDispatch","useCallback","element","dataset","name","GENERAL_SETTINGS","payload","setupSettingAC","key","Counter","changeValue","resetValue","modeModal","setModeModal","toggleModeModal","document","classList","add","body_lock","disableButtonWhenWorkingAutoplay","useMemo","disableActionButton","disableSettingsButton","disableResetButton","finishValueForArea","red","buttons","action","reset","settings","CounterContainer","intervalIdForTimer","setIntervalIdForTimer","autoplayMode","setAutoPlayMode","speedPlayingAutoplay","intervalId","window","setInterval","clearInterval","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","rootReducer","combineReducers","SET_START_VALUE","SET_FINISH_VALUE","SET_AUTOPLAY_OPTION","SET_SPEED_AUTOPLAY_OPTION","SET_CONDITION_OF_WORK","store","createStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f4ce8850.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"ModalWindow_modal__2QOLI\",\"background\":\"ModalWindow_background__lHKgE\",\"dialog\":\"ModalWindow_dialog__wQoMK\",\"header__content\":\"ModalWindow_header__content__1oSQa\",\"data\":\"ModalWindow_data__2teap\",\"data__title\":\"ModalWindow_data__title__3LKdC\",\"title\":\"ModalWindow_title__1z4dT\",\"close\":\"ModalWindow_close__j1cLi\",\"mode__title\":\"ModalWindow_mode__title__3-qBx\",\"mode_margin\":\"ModalWindow_mode_margin__2g0Es\",\"speed\":\"ModalWindow_speed__2yj3n\",\"speed__title\":\"ModalWindow_speed__title__1qNex\",\"speed__body\":\"ModalWindow_speed__body__2qY0U\",\"range\":\"ModalWindow_range__2q3Rs\",\"error\":\"ModalWindow_error__225qw\",\"btn__accept\":\"ModalWindow_btn__accept__asEHz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"SuperSelect_select__3xIOr\",\"active\":\"SuperSelect_active__2jOc_\",\"item\":\"SuperSelect_item__3S0LV\",\"title\":\"SuperSelect_title__2jmPo\",\"body\":\"SuperSelect_body__695vW\",\"hover\":\"SuperSelect_hover__2MNRR\",\"none\":\"SuperSelect_none__3FBEe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body_lock\":\"Counter_body_lock__2CbAx\",\"counter\":\"Counter_counter__3Z2WH\",\"buttons\":\"Counter_buttons__7hGFj\",\"red\":\"Counter_red__3sVss\",\"action\":\"Counter_action__1_ddI\",\"reset\":\"Counter_reset__2uU-j\",\"settings\":\"Counter_settings__3qhlP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"AutoPlay_container__3ubi8\",\"play\":\"AutoPlay_play__1_daj\",\"active\":\"AutoPlay_active__3AzF4\",\"advise\":\"AutoPlay_advise__1-v87\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__3cW1B\",\"play\":\"Button_play__1C94W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"SuperInput_error__2qXQ4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SuperRange_container__M4c9H\",\"input\":\"SuperRange_input__s4rxb\",\"track\":\"SuperRange_track__3Lgja\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"area\":\"Area_area__3K9PX\"};","export enum ACTIONS_TYPE {\n    INCREASE_CURRENT_VALUE = 'INCREASE_CURRENT_VALUE/COUNTER_COMPONENT',\n    DECREASE_CURRENT_VALUE = 'DECREASE_CURRENT_VALUE/COUNTER_COMPONENT',\n    SET_CURRENT_VALUE = 'CHANGE_CURRENT_VALUE/COUNTER_COMPONENT',\n    GENERAL_SETTINGS = 'GENERAL_SETTINGS/COUNTER_COMPONENT',\n    SET_START_VALUE = 'CHANGE_START_VALUE/COUNTER_COMPONENT',\n    SET_FINISH_VALUE = 'CHANGE_FINISH_VALUE/COUNTER_COMPONENT',\n    SET_CONDITION_OF_WORK = 'CHANGE_CONDITION_OF_WORK/COUNTER_COMPONENT',\n    SET_AUTOPLAY_OPTION = 'SET_AUTOPLAY_OPTION/COUNTER_COMPONENT',\n    SET_SPEED_AUTOPLAY_OPTION = 'SET_SPEED_AUTOPLAY_OPTION/COUNTER_COMPONENT '\n}\n\ntype SetStartValueType = ReturnType<typeof setStartValueAC>\nexport const setStartValueAC = (startValue: number) => {\n    return {\n        type: ACTIONS_TYPE.SET_START_VALUE,\n        startValue,\n    } as const\n}\ntype SetFinishValueType = ReturnType<typeof setFinishValueAC>\nexport const setFinishValueAC = (finishValue: number) => {\n    return {\n        type: ACTIONS_TYPE.SET_FINISH_VALUE,\n        finishValue,\n    } as const\n}\ntype SetCurrentValueType = ReturnType<typeof setCurrentValueAC>\nexport const setCurrentValueAC = (currentValue: number) => {\n    return {\n        type: ACTIONS_TYPE.SET_CURRENT_VALUE,\n        currentValue,\n    } as const\n}\ntype SetAutoPlayOptionType = ReturnType<typeof setAutoPlayOptionAC>\nexport const setAutoPlayOptionAC = (autoPlayOption: boolean) => {\n    return {\n        type: ACTIONS_TYPE.SET_AUTOPLAY_OPTION,\n        autoPlayOption,\n    } as const\n}\ntype SetConditionOfWorkType = ReturnType<typeof setConditionOfWorkAC>\nexport const setConditionOfWorkAC = (conditionOfWork: string) => {\n    return {\n        type: ACTIONS_TYPE.SET_CONDITION_OF_WORK,\n        conditionOfWork,\n    } as const\n}\ntype SetSpeedAutoplayOption = ReturnType<typeof setSpeedAutoplayOption>\nexport const setSpeedAutoplayOption = (speedAutoplayOption: number) => {\n    return {\n        type: ACTIONS_TYPE.SET_SPEED_AUTOPLAY_OPTION,\n        speedAutoplayOption,\n    } as const\n}\n\ntype IncreaseCurrentValueType = ReturnType<typeof increaseCurrentValueAC>\nexport const increaseCurrentValueAC = () => {\n    return {\n        type: ACTIONS_TYPE.INCREASE_CURRENT_VALUE,\n    } as const\n}\ntype DecreaseCurrentValueType = ReturnType<typeof decreaseCurrentValueAC>\nexport const decreaseCurrentValueAC = () => {\n    return {\n        type: ACTIONS_TYPE.DECREASE_CURRENT_VALUE,\n    } as const\n}\ntype SetupSettingType = {\n    type: ACTIONS_TYPE.GENERAL_SETTINGS,\n    payload: {\n        startValue: number,\n        finishValue: number,\n        autoPlayOption: boolean,\n        conditionOfWork: string\n        speedAutoplayOption: number\n    }\n}\nexport const setupSettingAC = (startValue: number, finishValue: number, autoPlayOption: boolean, conditionOfWork: string, speedAutoplayOption: number): SetupSettingType => {\n    return {\n        type: ACTIONS_TYPE.GENERAL_SETTINGS,\n        payload: {\n            startValue,\n            finishValue,\n            autoPlayOption,\n            conditionOfWork,\n            speedAutoplayOption,\n        }\n    }\n}\nexport type ActionCounterType =\n    SetupSettingType\n    | SetStartValueType\n    | SetFinishValueType\n    | SetCurrentValueType\n    | SetAutoPlayOptionType\n    | SetConditionOfWorkType\n    | SetSpeedAutoplayOption\n    | IncreaseCurrentValueType\n    | DecreaseCurrentValueType\n    ;\n","import React from 'react';\nimport s from \"./Area.module.css\";\n\n\ntype AreaPropsType = {\n    maxValue: number\n    classMaxValue: string\n    value: number\n}\nexport const Area: React.FC<AreaPropsType> = React.memo(props => {\n    const {\n        maxValue,\n        classMaxValue,\n        value,\n    } = props;\n\n    let finalClass = value === maxValue ? `${s.area} ${classMaxValue}` : `${s.area}`;\n    return (\n        <div className={finalClass}>\n            {value}\n        </div>\n    )\n})","import React from 'react';\nimport s from './Button.module.css'\n\ntype ButtonTypeProps = {\n    clName?: string\n    disabled?: boolean\n    title: string\n    callback: () => void\n    autoPlayOption?: boolean\n}\nexport const Button: React.FC<ButtonTypeProps> = React.memo(props => {\n    const {\n        clName,\n        disabled,\n        title,\n        callback,\n        autoPlayOption,\n    } = props;\n    const changeValue = () => {\n        callback()\n    }\n    const finalClass = clName ? `${s.btn} ${clName}` : s.btn;\n    return (\n        <button className={finalClass} disabled={disabled} onClick={changeValue}>\n            {title}\n            {autoPlayOption && <span className={s.play}> </span>}\n        </button>\n    )\n})","import React, {ChangeEvent, useState} from \"react\";\nimport s from './SuperInput.module.css'\n\ntype SuperInputPropsType = {\n    value: number\n    callback: (e: ChangeEvent<HTMLInputElement>) => void\n    error: boolean\n    setError: (value: boolean) => void\n    dataName?:string\n};\nexport const SuperInput: React.FC<SuperInputPropsType> = React.memo(props => {\n    const {\n        value,\n        callback,\n        error,\n        setError,\n    } = props;\n    const [tempValue, setTempValue] = useState(value);\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        let value = e.currentTarget.value;\n        if (!isFinite(+value) || value === null) return; //проверка на введенное значение\n        setError(false);\n        setTempValue(Number(value));\n        callback(e);\n    }\n\n    const finallyClass = error ? `${s.error} ${s.input}` : s.input;\n    return (\n        <>\n            <input\n                className={finallyClass}\n                type={'text'}\n                onChange={onChangeHandler}\n                value={tempValue}\n                data-name={props.dataName}\n            />\n        </>\n    )\n})","import React, {useState, useEffect} from \"react\";\nimport s from './SuperSelect.module.css'\nimport {OptionsOfWorkType} from \"../../Redux/counter_reducer\";\n\ntype SuperSelectPropsType = {\n    data: Array<OptionsOfWorkType>\n    startMode: string\n    callback: (value: string) => void\n}\nexport const SuperSelect: React.FC<SuperSelectPropsType> = React.memo(props => {\n    const {\n        data,\n        callback,\n        startMode,\n    } = props;\n    const [hoverElementID, setHoverElementID] = useState(startMode);\n    const [active, setActive] = useState(false);\n\n    const selectedItem = data.find(d => d.title === startMode);\n    const hoveredItem = data.find(e => e.title === hoverElementID);\n\n    const toggleActiveOfSelect = () => {\n        setActive(!active);\n    }\n    const turnOffSelect = () => {\n        setActive(false);\n    }\n    const onClickHandler = (title: string) => {\n        callback(title);\n        setActive(false)\n    }\n    useEffect(() => {\n        setHoverElementID(startMode)\n    }, [startMode]);\n\n\n    const finalClassSelect = active ? `${s.select} ${s.active}` : s.select;\n    const finalClassSelectTitle = active ? `${s.title} ${s.item} ${s.active}` : `${s.title} ${s.item}`;\n    return (\n        <div\n            tabIndex={1}\n            className={finalClassSelect}\n            onClick={toggleActiveOfSelect}\n            onBlur={turnOffSelect}\n        >\n            <div className={finalClassSelectTitle}>{selectedItem && selectedItem.title}</div>\n            {active &&\n            <div className={s.body}>\n                {data.map(d => {\n                    return (\n                        <div\n                            key={d.id}\n                            className={d === hoveredItem ? `${s.item} ${s.hover}` : s.item}\n                            onClick={() => onClickHandler(d.title)}\n                            onMouseEnter={() => setHoverElementID(d.title)}\n                        >\n                            {d.title}\n                        </div>\n                    )\n                })}</div>}\n        </div>\n    )\n})","import React, {useState} from \"react\";\nimport s from './AutoPlay.module.css'\n\ntype AutoPlayPropsType = {\n    startValueAutoPlay: boolean\n    callback: (value: boolean) => void\n}\nexport const AutoPlay: React.FC<AutoPlayPropsType> = React.memo(props => {\n    const {\n        startValueAutoPlay,\n        callback,\n    } = props;\n\n    const [active, setActive] = useState(startValueAutoPlay);\n    const [advise, setAdvise] = useState(false);\n\n    const finalClass = active ? `${s.play} ${s.active}` : s.play;\n    const onClickHandler = () => {\n        callback(!active);\n        setActive(!active);\n    }\n    const showAdvise = () => {\n        setAdvise(true)\n    }\n    const closeAdvise = () => {\n        setAdvise(false)\n    }\n    return (\n        <div\n            className={s.container}\n            onMouseLeave={closeAdvise}>\n            <div\n                className={finalClass}\n                onClick={onClickHandler}\n                onMouseEnter={showAdvise}\n            >\n            </div>\n            {advise &&\n            <div>\n                <div className={s.advise}>\n                    autoplay\n                </div>\n            </div>\n            }\n        </div>\n    )\n})","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from './SuperRange.module.css'\r\n\r\ntype SuperInputPropsType = {\r\n    value: number\r\n    callback: (value: number) => void\r\n};\r\nexport const SuperRange: React.FC<SuperInputPropsType> = React.memo(props => {\r\n    const {\r\n        value,\r\n        callback,\r\n    } = props\r\n    const [tempValue, setTempValue] = useState(value);\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        callback(Number(e.currentTarget.value));\r\n        setTempValue(Number(e.currentTarget.value))\r\n        bgcTrack()\r\n    }\r\n    const bgcTrack = () => {\r\n        let percent1: number = (tempValue / 5) * 100;\r\n        return `linear-gradient(to right, green ${percent1}%, grey ${percent1}%)`\r\n    }\r\n    return (\r\n        <div className={s.container}>\r\n            <div style={{background:bgcTrack()}} className={s.track}> </div>\r\n            <input\r\n                className={s.input}\r\n                type={'range'}\r\n                min={1}\r\n                max={5}\r\n                step={1}\r\n                value={tempValue}\r\n                onChange={onChangeHandler}\r\n            />\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent} from 'react';\nimport s from './ModalWindow.module.css'\nimport {SuperInput} from \"../SuperInput/SuperInput\";\nimport {Button} from \"../Button/Button\";\nimport {SuperSelect} from \"../SuperSelect/SuperSelect\";\nimport {AutoPlay} from \"../AutoPlay/AutoPlay\";\nimport {OptionsOfWorkType} from \"../../Redux/counter_reducer\";\nimport {SuperRange} from \"../SuperRange/SuperRange\";\n\ntype ModalWindowPropsType = {\n    onKeyPress: (e: KeyboardEvent<HTMLDivElement>) => void\n    closeModal: () => void\n    start: number\n    finish: number\n    onChangeValue: (e: ChangeEvent<HTMLInputElement>) => void\n    error: boolean\n    setError: (value: boolean) => void\n    autoPlay: boolean\n    setAutoPlay: (value: boolean) => void\n    speed:number\n    setSpeed: (value: number) => void\n    optionOfWork: Array<OptionsOfWorkType>\n    conditionOfWork: string\n    setConditionOfWork: (value: string) => void\n    setData: () => void\n}\nexport const ModalWindow: React.FC<ModalWindowPropsType> = React.memo((props: ModalWindowPropsType) => {\n    const {\n        onKeyPress,\n        closeModal,\n        start,\n        finish,\n        onChangeValue,\n        error,\n        setError,\n        autoPlay,\n        setAutoPlay,\n        speed,\n        setSpeed,\n        optionOfWork,\n        conditionOfWork,\n        setConditionOfWork,\n        setData,\n    } = props;\n    const closeModalWindow = () => {\n        closeModal();\n    }\n\n    return (\n        <div tabIndex={0} onKeyUp={onKeyPress} className={`${s.modal}`}>\n            <div className={s.dialog}>\n                <div className={s.header}>\n                    <div className={s.header__content}>\n                        <div className={s.title}>Settings</div>\n                        <div className={s.close} onClick={closeModal}>&times;</div>\n                    </div>\n                </div>\n                <div className={s.body}>\n                    <div className={s.data}>\n                        <div className={s.data__title}>Start number</div>\n                        <SuperInput\n                            value={start}\n                            callback={onChangeValue}\n                            error={error}\n                            setError={setError}\n                            dataName={'startValue'}\n                        />\n                        <div className={s.data__title}>End number</div>\n                        <SuperInput\n                            value={finish}\n                            callback={onChangeValue}\n                            error={error}\n                            setError={setError}\n                            dataName={'finishValue'}\n                        />\n                    </div>\n                    <div className={s.mode}>\n                        <div className={autoPlay ? `${s.mode__title} ${s.mode_margin}` : s.mode__title}>\n                            <div>Choose mode</div>\n                            <AutoPlay\n                                startValueAutoPlay={autoPlay}\n                                callback={setAutoPlay}\n                            />\n                        </div>\n                        {autoPlay &&\n                        <div className={s.speed}>\n                            <div className={s.speed__body}>\n                                <span className={s.speed__title}>Speed: <span>{speed}X</span></span>\n                            </div>\n                            <div className={s.range}>\n                                <SuperRange\n                                    value={speed}\n                                    callback={setSpeed}\n                                />\n                            </div>\n                        </div>\n                        }\n                        <SuperSelect\n                            data={optionOfWork}\n                            startMode={conditionOfWork}\n                            callback={setConditionOfWork}\n                        />\n                    </div>\n                    <Button\n                        clName={s.btn__accept}\n                        title={'Accept'}\n                        callback={setData}\n                        disabled={error}\n                    />\n                </div>\n            </div>\n            <div onClick={closeModalWindow} className={s.background}> </div>\n        </div>\n    )\n})","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Dispatch} from \"redux\";\nimport {setupSettingAC} from \"../../Redux/actions\";\nimport {RootReducerType} from \"../../Redux/store\";\nimport {OptionsOfWorkType} from \"../../Redux/counter_reducer\";\nimport {ModalWindow} from \"./ModalWindow\";\n\n\ntype ModalWindowContainerPropsType = {\n    setModal: () => void\n    startValue: number\n    finishValue: number\n    autoPlayOption: boolean\n    speedAutoplayOption:number\n    conditionOfWork: string\n}\nexport const ModalWindowContainer:React.FC<ModalWindowContainerPropsType> = React.memo((props) => {\n    const {\n        setModal,\n        startValue,\n        finishValue,\n        autoPlayOption,\n        speedAutoplayOption,\n        conditionOfWork\n    } = props;\n    const [start, setStart] = useState(startValue);\n    const [finish, setFinish] = useState(finishValue);\n    const [autoPlay, setAutoPlay] = useState(autoPlayOption);\n    const [speed, setSpeed] = useState(speedAutoplayOption)\n    const [condition, setCondition] = useState(conditionOfWork);\n    const [error, setError] = useState(false);\n    const optionOfWork = useSelector<RootReducerType, Array<OptionsOfWorkType>>(state => state.counter.optionsOfWork);\n    let dispatch = useDispatch<Dispatch>();\n\n    const onChangeValue = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        let element = e.currentTarget;\n        if (e.currentTarget.dataset.name) {\n            const trigger: string = e.currentTarget.dataset.name;\n            if (trigger === 'startValue') {\n                setStart(Number(element.value))\n            } else {\n                setFinish(Number(element.value))\n            }\n        }\n    }, [])\n\n    const closeModal = useCallback(() => {\n        setModal();\n    }, [setModal])\n\n    const setData = useCallback(() => {\n        if (start < 0 || start === finish || start > finish) {\n            setError(true);\n            return\n        }\n        setError(false);\n        dispatch(setupSettingAC(start, finish, autoPlay, condition,speed ));\n        setModal();\n    }, [start, finish, condition, autoPlay, dispatch, setModal, speed])\n\n    const onKeyPress = useCallback((e: KeyboardEvent<HTMLDivElement>) => {\n        switch (e.key) {\n            case 'Escape':\n                closeModal()\n                break;\n            case 'Enter':\n                setData();\n                break;\n            default:\n                return\n        }\n    }, [closeModal, setData])\n\n    return (\n        <ModalWindow\n            onKeyPress={onKeyPress}\n            closeModal={closeModal}\n            start={start}\n            finish={finish}\n            onChangeValue={onChangeValue}\n            error={error}\n            setError={setError}\n            autoPlay={autoPlay}\n            setAutoPlay={setAutoPlay}\n            speed={speed}\n            setSpeed={setSpeed}\n            optionOfWork={optionOfWork}\n            conditionOfWork={condition}\n            setConditionOfWork={setCondition}\n            setData={setData}\n        />\n    )\n})","import React, {useCallback, useEffect, useMemo, useState} from 'react';\nimport s from './Counter.module.css';\nimport {Area} from \"./Components/Area/Area\";\nimport {Button} from \"./Components/Button/Button\";\nimport {ModalWindowContainer} from \"./Components/ModalWindow/ModalWindowContainer\";\n\ntype CounterPropsType = {\n    startValue: number\n    finishValue: number\n    currentValue: number\n    autoPlayOption: boolean\n    speedAutoplayOption: number\n    conditionOfWork: string\n    changeValue: () => void\n    resetValue: () => void\n}\nexport const Counter: React.FC<CounterPropsType> = React.memo((props) => {\n    const {\n        startValue,\n        finishValue,\n        currentValue,\n        autoPlayOption,\n        speedAutoplayOption,\n        conditionOfWork,\n        changeValue,\n        resetValue,\n    } = props;\n\n    const [modeModal, setModeModal] = useState(false); //открытие/закрытие модального окна\n\n    const toggleModeModal = useCallback(() => {\n        setModeModal(!modeModal)\n    }, [modeModal])\n    //блокируем скролл всей страницы, когда открыто модальное окно\n    useEffect(() => {\n        if (modeModal) {\n            document.body.classList.add(s.body_lock)\n        } else {\n            document.body.className = ''\n        }\n    }, [modeModal])\n\n    const disableButtonWhenWorkingAutoplay = useMemo(() => {\n        return currentValue !== finishValue && currentValue !== startValue\n    }, [currentValue, finishValue, startValue])\n\n    const disableActionButton = useMemo(() => {\n        if (autoPlayOption) {\n            if (conditionOfWork === 'increase') {\n                return currentValue === finishValue || disableButtonWhenWorkingAutoplay\n            } else {\n                return currentValue === startValue || disableButtonWhenWorkingAutoplay\n            }\n        } else {\n            if (conditionOfWork === 'increase') {\n                return currentValue === finishValue\n            } else {\n                return currentValue === startValue\n            }\n        }\n    }, [autoPlayOption, conditionOfWork, currentValue, startValue, finishValue, disableButtonWhenWorkingAutoplay]);\n\n    const disableSettingsButton = useMemo(() => {\n        if (autoPlayOption) {\n            return disableButtonWhenWorkingAutoplay;\n        }\n        return false\n    }, [autoPlayOption, disableButtonWhenWorkingAutoplay])\n\n    const disableResetButton = useMemo(() => {\n        if (conditionOfWork === 'increase') {\n            return currentValue === startValue;\n        } else {\n            return currentValue === finishValue\n        }\n    }, [conditionOfWork, currentValue, startValue, finishValue])\n\n\n    const finishValueForArea = useMemo(() => {\n        if (conditionOfWork === 'increase') {\n            return finishValue\n        } else {\n            return startValue\n        }\n    }, [conditionOfWork, finishValue, startValue])\n\n    return (\n        <div className={s.counter}>\n            <Area\n                maxValue={finishValueForArea}\n                classMaxValue={s.red}\n                value={currentValue}\n            />\n            <div className={s.buttons}>\n                <Button\n                    clName={s.action}\n                    disabled={disableActionButton}\n                    title={conditionOfWork}\n                    callback={changeValue}\n                    autoPlayOption={autoPlayOption}\n                />\n                <Button\n                    clName={s.reset}\n                    disabled={disableResetButton}\n                    title={'reset'}\n                    callback={resetValue}\n                />\n                <Button\n                    clName={s.settings}\n                    title={'settings'}\n                    callback={toggleModeModal}\n                    disabled={disableSettingsButton}\n                />\n            </div>\n            {modeModal && <ModalWindowContainer\n                setModal={toggleModeModal}\n                startValue={startValue}\n                finishValue={finishValue}\n                autoPlayOption={autoPlayOption}\n                speedAutoplayOption={speedAutoplayOption}\n                conditionOfWork={conditionOfWork}\n            />}\n        </div>\n    )\n})","import {Counter} from \"./Counter\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"./Redux/store\";\r\nimport {\r\n    decreaseCurrentValueAC,\r\n    increaseCurrentValueAC,\r\n    setCurrentValueAC\r\n} from \"./Redux/actions\";\r\nimport React, {useCallback, useEffect, useState} from \"react\";\r\nimport {Dispatch} from \"redux\";\r\nimport {speedCounterWhenAutoplay} from \"./utils/speedCounterWhenAutoplay\";\r\n\r\n\r\nexport const CounterContainer = React.memo(() => {\r\n    const {\r\n        startValue,\r\n        finishValue,\r\n        currentValue,\r\n        conditionOfWork,\r\n        autoPlayOption,\r\n        speedAutoplayOption,\r\n    } = useSelector<RootReducerType, any>(state => state.counter)\r\n\r\n    const [intervalIdForTimer, setIntervalIdForTimer] = useState(0)\r\n    const [autoplayMode, setAutoPlayMode] = useState(false); //для запуска useEffect\r\n    let dispatch = useDispatch<Dispatch>();\r\n\r\n    let speedPlayingAutoplay: number = speedCounterWhenAutoplay(speedAutoplayOption);\r\n\r\n    useEffect(() => {\r\n        if (autoplayMode) {\r\n            let intervalId: number = window.setInterval(() => {\r\n                if (conditionOfWork === 'increase') {\r\n                    if (currentValue < finishValue) {\r\n                        dispatch(increaseCurrentValueAC());\r\n                    } else {\r\n                        clearInterval(intervalId);\r\n                        setAutoPlayMode(false);\r\n                    }\r\n                } else {\r\n                    if (currentValue > startValue) {\r\n                        dispatch(decreaseCurrentValueAC());\r\n                    } else {\r\n                        clearInterval(intervalId)\r\n                        setAutoPlayMode(false);\r\n                    }\r\n                }\r\n            }, speedPlayingAutoplay)\r\n            setIntervalIdForTimer(intervalId);\r\n            return () => {\r\n                clearInterval(intervalId);\r\n            }\r\n        }\r\n    }, [autoPlayOption, autoplayMode, currentValue, startValue, finishValue, conditionOfWork, speedPlayingAutoplay, dispatch])\r\n\r\n    useEffect(() => {\r\n        dispatch(setCurrentValueAC(conditionOfWork === 'increase' ? startValue : finishValue))\r\n    }, [startValue, finishValue, conditionOfWork, dispatch])\r\n\r\n    const changeValue = useCallback(() => {\r\n        if (autoPlayOption) {\r\n            setAutoPlayMode(true)\r\n        } else {\r\n            if (conditionOfWork === 'increase') {\r\n                dispatch(increaseCurrentValueAC())\r\n            } else {\r\n                dispatch(decreaseCurrentValueAC())\r\n            }\r\n        }\r\n    }, [autoPlayOption, conditionOfWork, dispatch])\r\n\r\n    const resetValue = useCallback(() => {\r\n        if (autoPlayOption) {\r\n            clearInterval(intervalIdForTimer);\r\n            setAutoPlayMode(false)\r\n        }\r\n        if (conditionOfWork === 'increase') {\r\n            dispatch(setCurrentValueAC(startValue))\r\n        } else {\r\n            dispatch(setCurrentValueAC(finishValue))\r\n        }\r\n    }, [conditionOfWork, intervalIdForTimer, autoPlayOption, startValue, finishValue, dispatch])\r\n\r\n    return (\r\n        <Counter\r\n            startValue={startValue}\r\n            finishValue={finishValue}\r\n            currentValue={currentValue}\r\n            autoPlayOption={autoPlayOption}\r\n            speedAutoplayOption={speedAutoplayOption}\r\n            conditionOfWork={conditionOfWork}\r\n            changeValue={changeValue}\r\n            resetValue={resetValue}\r\n        />\r\n    )\r\n})","export const speedCounterWhenAutoplay = (step:number) => {\r\n    return  1000 / step;\r\n}","import React from 'react';\nimport './App.css';\nimport {CounterContainer} from \"./Counter/CounterContainer\";\n\n\nexport const App = () => {\n    return (\n        <div className=\"App\">\n            <CounterContainer/>\n        </div>\n    );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {ACTIONS_TYPE, ActionCounterType} from \"./actions\";\n\nexport type OptionsOfWorkType = {\n    id:number,\n    title:string\n}\nconst initialState = {\n    startValue:0,\n    finishValue:5,\n    currentValue:0,\n    modeModal:false,\n    autoPlayOption:false,\n    speedAutoplayOption: 1,\n    optionsOfWork: [\n        {id: 1, title: 'increase'},\n        {id: 2, title: 'decrease'}\n    ] as Array<OptionsOfWorkType>,\n    conditionOfWork:'increase'\n}\nexport type InitialStateType = typeof initialState;\nexport const counterReducer = (state:InitialStateType = initialState, action:ActionCounterType):InitialStateType => {\n    switch (action.type){\n        case ACTIONS_TYPE.SET_START_VALUE:\n        case ACTIONS_TYPE.SET_FINISH_VALUE:\n        case ACTIONS_TYPE.SET_CURRENT_VALUE:\n        case ACTIONS_TYPE.SET_AUTOPLAY_OPTION:\n        case ACTIONS_TYPE.SET_SPEED_AUTOPLAY_OPTION:\n        case ACTIONS_TYPE.SET_CONDITION_OF_WORK: {\n            return {\n                ...state,\n                ...action\n            }\n        }\n        case ACTIONS_TYPE.GENERAL_SETTINGS: {\n            if(action.payload.conditionOfWork === 'increase') {\n                return {\n                    ...state,\n                    ...action.payload,\n                    currentValue: action.payload.startValue\n                }\n            } else{\n                return {\n                    ...state,\n                    ...action.payload,\n                    currentValue: action.payload.finishValue\n                }\n            }\n        }\n        case ACTIONS_TYPE.INCREASE_CURRENT_VALUE:\n            return {\n                ...state,\n                currentValue: state.currentValue + 1\n            }\n        case ACTIONS_TYPE.DECREASE_CURRENT_VALUE:\n            return {\n                ...state,\n                currentValue: state.currentValue - 1\n            }\n        default:\n            return state\n    }\n}","import {combineReducers, createStore, Store} from \"redux\";\nimport {counterReducer} from \"./counter_reducer\";\nimport {loadState, saveState} from \"../utils/localStorage_util\";\n\nlet rootReducer = combineReducers({\n    counter: counterReducer\n});\n\nexport type RootReducerType = ReturnType<typeof rootReducer>;\nexport let store: Store<RootReducerType, any> = createStore(rootReducer, loadState());\n\nstore.subscribe(() => {\n    saveState({\n        counter: store.getState().counter\n    })\n})\n// @ts-ignore\nwindow.store = store","import {RootReducerType} from \"../Redux/store\";\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('counter-state');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\nexport const saveState = (state:RootReducerType) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('counter-state', serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from './Counter/Redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App/>\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}