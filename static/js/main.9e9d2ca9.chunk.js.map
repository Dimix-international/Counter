{"version":3,"sources":["Counter/ModalWindow/ModalWindow.module.css","Counter/SuperSelect/SuperSelect.module.css","Counter/Counter.module.css","Counter/AutoPlay/AutoPlay.module.css","Counter/Button/Button.module.css","Counter/SuperInput/SuperInput.module.css","Counter/Area/Area.module.css","Counter/Area/Area.tsx","Counter/Button/Button.tsx","Counter/SuperInput/SuperInput.tsx","Counter/SuperSelect/SuperSelect.tsx","Counter/AutoPlay/AutoPlay.tsx","Counter/ModalWindow/ModalWindow.tsx","Counter/Counter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Area","React","memo","maxValue","classMaxValue","value","finalClass","s","area","className","Button","clName","disabled","title","callback","autoPlayOption","btn","onClick","play","SuperInput","error","setError","useState","tempValue","setTempValue","finallyClass","input","type","onChange","e","Number","currentTarget","onBlur","SuperSelect","data","startMode","hoverElementID","setHoverElementID","active","setActive","selectedItem","find","d","hoveredItem","useEffect","finalClassSelect","select","finalClassSelectTitle","item","tabIndex","body","map","hover","onMouseEnter","id","AutoPlay","startValueAutoPlay","advise","setAdvise","container","onMouseLeave","ModalWindow","props","startValue","start","setStart","finishValue","finish","setFinish","conditionOfWork","mode","setMode","autoPlay","setAutoPlay","closeModal","setModal","onKeyUp","key","modal","dialog","header","header__content","close","data__title","mode__title","optionOfWork","btn__accept","setStartValue","setFinishValue","setConditionOfWork","setAutoPlayOption","Counter","startValueAsString","localStorage","getItem","JSON","parse","getStartValueFromLocalStorage","finishValueAsString","f","getFinishValueFromLocalStorage","currentValue","setCurrentValue","modeModal","setModeModal","intervalForPause","setIntervalForPause","setValueWhenOccurChangeInSettings","conditionAsString","autoPlayValueAsString","setItem","stringify","resetValue","useCallback","clearInterval","toggleModeModal","disableButtonWhenWorkingAutoplay","counter","red","buttons","action","intervalId","setInterval","reset","settings","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9e9d2ca9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"ModalWindow_modal__4We-m\",\"dialog\":\"ModalWindow_dialog__fHlIt\",\"header__content\":\"ModalWindow_header__content__30L-o\",\"data\":\"ModalWindow_data__1RAh8\",\"data__title\":\"ModalWindow_data__title__2YL-O\",\"title\":\"ModalWindow_title__1UeUX\",\"close\":\"ModalWindow_close__2ruNP\",\"mode__title\":\"ModalWindow_mode__title__3e1Me\",\"error\":\"ModalWindow_error__38ja8\",\"btn__accept\":\"ModalWindow_btn__accept__3Dz3Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"SuperSelect_select__xUvkP\",\"active\":\"SuperSelect_active__2lDBm\",\"item\":\"SuperSelect_item__exiXH\",\"title\":\"SuperSelect_title__jMZGa\",\"body\":\"SuperSelect_body__1AhLW\",\"hover\":\"SuperSelect_hover__1Lu0J\",\"none\":\"SuperSelect_none__2A3oz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__3Z2WH\",\"buttons\":\"Counter_buttons__7hGFj\",\"red\":\"Counter_red__3sVss\",\"action\":\"Counter_action__1_ddI\",\"reset\":\"Counter_reset__2uU-j\",\"settings\":\"Counter_settings__3qhlP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"AutoPlay_container__3aCzv\",\"play\":\"AutoPlay_play__3EtEe\",\"active\":\"AutoPlay_active__3UaGx\",\"advise\":\"AutoPlay_advise__A-j3C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__1_Jlx\",\"play\":\"Button_play__3iQry\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"SuperInput_error__1EAg_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"area\":\"Area_area__Fytjt\"};","import React from 'react';\r\nimport s from \"./Area.module.css\";\r\n\r\n\r\ntype AreaPropsType = {\r\n    maxValue: number\r\n    classMaxValue: string\r\n    value: number\r\n}\r\nexport const Area:React.FC<AreaPropsType> = React.memo(({maxValue,classMaxValue,value,}) => {\r\n\r\n    let finalClass = value === maxValue ? `${s.area} ${classMaxValue}` : `${s.area}`;\r\n    return (\r\n        <div className={finalClass}>\r\n            {value}\r\n        </div>\r\n    )\r\n})","import React from 'react';\r\nimport s from './Button.module.css'\r\n\r\ntype ButtonTypeProps = {\r\n    clName?:string\r\n    disabled?: boolean\r\n    title: string\r\n    callback: () => void\r\n    autoPlayOption?: boolean\r\n}\r\nexport const Button: React.FC<ButtonTypeProps> = React.memo((\r\n    {clName, disabled, title, callback, autoPlayOption}\r\n) => {\r\n\r\n    const changeValue = () => {\r\n        callback()\r\n    }\r\n    const finalClass = clName ? `${s.btn} ${clName}` : s.btn;\r\n    return (\r\n        <button className={finalClass} disabled={disabled} onClick={changeValue}>\r\n            {title}\r\n            {autoPlayOption && <span className={s.play}></span>}\r\n        </button>\r\n    )\r\n})","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from './SuperInput.module.css'\r\n\r\ntype SuperInputPropsType = {\r\n    value:number\r\n    callback: (value:number) => void\r\n    error: boolean\r\n    setError: (value:boolean) => void\r\n};\r\nexport const SuperInput: React.FC<SuperInputPropsType> = (\r\n    {\r\n        value,\r\n        callback,\r\n        error,\r\n        setError\r\n    }) => {\r\n    const [tempValue, setTempValue] = useState(value);\r\n    const onChangeHandler = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setError(false);\r\n        setTempValue(Number(e.currentTarget.value));\r\n    }\r\n    const onBlurHandler = () => {\r\n        callback(tempValue);\r\n    }\r\n    const finallyClass = error ? `${s.error} ${s.input}`: s.input;\r\n    return (\r\n        <>\r\n            <input\r\n                className={finallyClass}\r\n                type={'number'}\r\n                onChange={onChangeHandler}\r\n                value={tempValue}\r\n                onBlur={onBlurHandler}\r\n            />\r\n        </>\r\n    )\r\n}","import React, {useState, KeyboardEvent, useEffect} from \"react\";\r\nimport s from './SuperSelect.module.css'\r\nimport {ConditionOfWorkType} from \"../Counter\";\r\ntype SuperSelectPropsType = {\r\n    data:Array<ConditionOfWorkType>\r\n    startMode:string\r\n    callback: (value:string) => void\r\n}\r\nexport const SuperSelect: React.FC<SuperSelectPropsType> = (\r\n    {\r\n        data,\r\n        callback,\r\n        startMode,\r\n\r\n    }) => {\r\n\r\n    const[hoverElementID, setHoverElementID] = useState(startMode);\r\n    const [active, setActive] = useState(false);\r\n\r\n    const selectedItem = data.find(d => d.title === startMode);\r\n    const hoveredItem = data.find(e => e.title === hoverElementID);\r\n\r\n    const toggleActiveOfSelect = () => {\r\n        setActive(!active);\r\n    }\r\n    const turnOffSelect = () => {\r\n        setActive(false);\r\n    }\r\n    const onClickHandler = (title:string) => {\r\n        callback(title);\r\n        setActive(false)\r\n    }\r\n    useEffect(() => {\r\n        setHoverElementID(startMode)\r\n    },[startMode]);\r\n\r\n\r\n    const finalClassSelect = active ? `${s.select} ${s.active}` : s.select;\r\n    const finalClassSelectTitle = active ? `${s.title} ${s.item} ${s.active}` : `${s.title} ${s.item}`;\r\n    return (\r\n        <div\r\n            tabIndex={1}\r\n            className={finalClassSelect}\r\n            onClick={toggleActiveOfSelect}\r\n            onBlur={turnOffSelect}\r\n        >\r\n            <div className={finalClassSelectTitle}>{selectedItem && selectedItem.title}</div>\r\n            {active &&\r\n            <div className={s.body}>\r\n                {data.map(d => {\r\n                return (\r\n                    <div\r\n                        key={d.id}\r\n                        className={ d === hoveredItem ? `${s.item} ${s.hover}`: s.item}\r\n                        onClick={() => onClickHandler(d.title)}\r\n                        onMouseEnter={() => setHoverElementID(d.title)}\r\n                    >\r\n                        {d.title}\r\n                    </div>\r\n                )\r\n            })}</div>}\r\n        </div>\r\n    )\r\n}","import React, {useState} from \"react\";\r\nimport s from './AutoPlay.module.css'\r\n\r\ntype AutoPlayPropsType = {\r\n    startValueAutoPlay:boolean\r\n    callback:(value:boolean) => void\r\n}\r\nexport const AutoPlay:React.FC<AutoPlayPropsType> = React.memo((\r\n    {\r\n        startValueAutoPlay,\r\n        callback\r\n    }) => {\r\n    const [active, setActive] = useState(startValueAutoPlay);\r\n    const [advise, setAdvise] = useState(false);\r\n\r\n\r\n    const finalClass = active ? `${s.play} ${s.active}` : s.play;\r\n    const onClickHandler = () => {\r\n        callback(!active);\r\n        setActive(!active);\r\n    }\r\n    const showAdvise = () => {\r\n        setAdvise(true)\r\n    }\r\n    const closeAdvise = () => {\r\n        setAdvise(false)\r\n    }\r\n    return (\r\n        <div\r\n            className={s.container}\r\n            onMouseLeave={closeAdvise}>\r\n            <div\r\n                className={finalClass}\r\n                onClick={onClickHandler}\r\n                onMouseEnter={showAdvise}\r\n            >\r\n            </div>\r\n            {advise &&\r\n            <div className={s.advise}>\r\n                autoplay\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n})","import React, {KeyboardEvent, useState} from 'react';\r\nimport s from './ModalWindow.module.css'\r\nimport {SuperInput} from \"../SuperInput/SuperInput\";\r\nimport {Button} from \"../Button/Button\";\r\nimport {ConditionOfWorkType} from \"../Counter\";\r\nimport {SuperSelect} from \"../SuperSelect/SuperSelect\";\r\nimport {AutoPlay} from \"../AutoPlay/AutoPlay\";\r\n\r\ntype ModalWindowPropsType = {\r\n    modeModal: boolean\r\n    setModal: () => void\r\n    startValue: number\r\n    setStartValue: (value: number) => void\r\n    finishValue: number\r\n    setFinishValue: (value: number) => void\r\n    optionOfWork: Array<ConditionOfWorkType>\r\n    conditionOfWork: string\r\n    setConditionOfWork: (value: string) => void\r\n    autoPlayOption:boolean\r\n    setAutoPlayOption:(value:boolean) => void\r\n}\r\nexport const ModalWindow = React.memo((props: ModalWindowPropsType) => {\r\n    const [start, setStart] = useState(props.startValue);\r\n    const [finish, setFinish] = useState(props.finishValue);\r\n    const [error, setError] = useState(false);\r\n\r\n    const [mode, setMode] = useState(props.conditionOfWork);\r\n    const[autoPlay, setAutoPlay] = useState(props.autoPlayOption)\r\n\r\n    const onKeyPressCloseModal = (e: KeyboardEvent<HTMLDivElement>) => e.key === 'Escape' && closeModal();\r\n    const closeModal = () => {\r\n        props.setModal();\r\n    }\r\n    const setData = () => {\r\n        if (start < 0 || start === finish || start > finish) {\r\n            setError(true);\r\n            return\r\n        }\r\n        setError(false);\r\n        props.setStartValue(start);\r\n        props.setFinishValue(finish);\r\n        props.setConditionOfWork(mode);\r\n        props.setModal();\r\n        props.setAutoPlayOption(autoPlay);\r\n    }\r\n    return (\r\n        <div tabIndex={0} onKeyUp={onKeyPressCloseModal} className={`${s.modal}`}>\r\n            <div className={s.dialog}>\r\n                <div className={s.header}>\r\n                    <div className={s.header__content}>\r\n                        <div className={s.title}>Settings</div>\r\n                        <div className={s.close} onClick={closeModal}>&times;</div>\r\n                    </div>\r\n                </div>\r\n                <div className={s.body}>\r\n                    <div className={s.data}>\r\n                        <div className={s.data__title}>Start number</div>\r\n                        <SuperInput\r\n                            value={start}\r\n                            callback={setStart}\r\n                            error={error}\r\n                            setError={setError}\r\n                        />\r\n                        <div className={s.data__title}>End number</div>\r\n                        <SuperInput\r\n                            value={finish}\r\n                            callback={setFinish}\r\n                            error={error}\r\n                            setError={setError}\r\n                        />\r\n                    </div>\r\n                    <div className={s.mode}>\r\n                        <div className={s.mode__title}>\r\n                            <div>Choose mode</div>\r\n                            <AutoPlay\r\n                                startValueAutoPlay={autoPlay}\r\n                                callback={setAutoPlay}\r\n                            />\r\n                        </div>\r\n                        <SuperSelect\r\n                            data={props.optionOfWork}\r\n                            startMode={mode}\r\n                            callback={setMode}\r\n                        />\r\n                    </div>\r\n                    <Button clName={s.btn__accept} title={'Accept'} callback={setData} disabled={error === true}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React, {useCallback, useEffect, useMemo, useState} from 'react';\r\nimport s from './Counter.module.css';\r\nimport {Area} from \"./Area/Area\";\r\nimport {Button} from \"./Button/Button\";\r\nimport {ModalWindow} from './ModalWindow/ModalWindow';\r\n\r\nexport type ConditionOfWorkType = { id: number, title: string }\r\n\r\nexport const Counter = () => {\r\n    const getStartValueFromLocalStorage = (): number => {\r\n        let startValueAsString = localStorage.getItem('startValueOfCounter');\r\n        let s = startValueAsString && JSON.parse(startValueAsString);\r\n        if (s) {\r\n            return Number(s);\r\n        }\r\n        return 0\r\n    }\r\n    const getFinishValueFromLocalStorage = (): number => {\r\n        let finishValueAsString = localStorage.getItem('finishValueOfCounter')\r\n        let f = finishValueAsString && JSON.parse(finishValueAsString);\r\n        if (f) {\r\n            return Number(f);\r\n        }\r\n        return 5\r\n    }\r\n    const [startValue, setStartValue] = useState(getStartValueFromLocalStorage());\r\n    const [finishValue, setFinishValue] = useState(getFinishValueFromLocalStorage());\r\n    let [currentValue, setCurrentValue] = useState(startValue);\r\n    const [modeModal, setModeModal] = useState(false);\r\n    const [autoPlayOption, setAutoPlayOption] = useState(false)\r\n\r\n    const [intervalForPause, setIntervalForPause] = useState<any>(null)\r\n\r\n    const optionOfWork: Array<ConditionOfWorkType> = [\r\n        {id: 1, title: 'increase'},\r\n        {id: 2, title: 'decrease'}\r\n    ]\r\n    const [conditionOfWork, setConditionOfWork] = useState(optionOfWork[0].title)\r\n\r\n    const setValueWhenOccurChangeInSettings = () => {\r\n        setStartValue(startValue)\r\n        setFinishValue(finishValue);\r\n        setConditionOfWork(conditionOfWork);\r\n        if (conditionOfWork === 'increase') {\r\n            setCurrentValue(startValue);\r\n        } else {\r\n            setCurrentValue(finishValue);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        //---conditionOfWork--\r\n        let conditionAsString = localStorage.getItem('modeCounter')\r\n        conditionAsString && setConditionOfWork(JSON.parse(conditionAsString));\r\n        //---autoplay--\r\n        let autoPlayValueAsString = localStorage.getItem('autoPlayValue')\r\n        autoPlayValueAsString && setAutoPlayOption(JSON.parse(autoPlayValueAsString));\r\n\r\n    }, []);\r\n    //---start--\r\n    useEffect(() => {\r\n        setValueWhenOccurChangeInSettings();\r\n        localStorage.setItem('startValueOfCounter', JSON.stringify(startValue))\r\n    }, [startValue]);\r\n    //---finish--\r\n    useEffect(() => {\r\n        setValueWhenOccurChangeInSettings();\r\n        localStorage.setItem('finishValueOfCounter', JSON.stringify(finishValue));\r\n    }, [finishValue]);\r\n    //---conditionOfWork--\r\n    useEffect(() => {\r\n        setValueWhenOccurChangeInSettings();\r\n        localStorage.setItem('modeCounter', JSON.stringify(conditionOfWork));\r\n    }, [conditionOfWork]);\r\n    //---autoplay--\r\n    useEffect(() => {\r\n        setValueWhenOccurChangeInSettings();\r\n        localStorage.setItem('autoPlayValue', JSON.stringify(autoPlayOption));\r\n    }, [autoPlayOption]);\r\n\r\n\r\n    const changeValue = () => {\r\n        if (autoPlayOption) {\r\n            let intervalId = setInterval(() => {\r\n                if (conditionOfWork === 'decrease') {\r\n                    if (currentValue > startValue) {\r\n                        setCurrentValue(value => value - 1);\r\n                        currentValue = currentValue - 1;\r\n                    } else {\r\n                        clearInterval(intervalId)\r\n                    }\r\n                } else {\r\n                    if (currentValue < finishValue) {\r\n                        setCurrentValue(value => value + 1);\r\n                        currentValue = currentValue + 1;\r\n                    } else {\r\n                        clearInterval(intervalId)\r\n                    }\r\n                }\r\n            }, 1000)\r\n            setIntervalForPause(intervalId);\r\n\r\n        }  else{\r\n            if (conditionOfWork === 'decrease') {\r\n                setCurrentValue(currentValue - 1);\r\n            } else {\r\n                setCurrentValue(currentValue + 1);\r\n            }\r\n        }\r\n    }\r\n    const resetValue = useCallback( () => {\r\n        clearInterval(intervalForPause);\r\n        setIntervalForPause(null);\r\n        if (conditionOfWork === 'decrease') {\r\n            setCurrentValue(finishValue);\r\n        } else {\r\n            setCurrentValue(startValue)\r\n        }\r\n    },[conditionOfWork, intervalForPause])\r\n\r\n    const toggleModeModal = useCallback(() => {\r\n        setModeModal(!modeModal)\r\n    },[modeModal])\r\n\r\n    const disableButtonWhenWorkingAutoplay = () => {\r\n        return currentValue !== finishValue && currentValue !== startValue\r\n    }\r\n    const disableActionButton = () => {\r\n        if (autoPlayOption) {\r\n            if (conditionOfWork === 'increase') {\r\n                if (currentValue === finishValue) return true\r\n                return disableButtonWhenWorkingAutoplay();\r\n            } else {\r\n                if (currentValue === startValue) return true\r\n                return disableButtonWhenWorkingAutoplay();\r\n            }\r\n        } else {\r\n            if (conditionOfWork === '') {\r\n                return true\r\n            } else if (conditionOfWork === 'increase') {\r\n                return currentValue === finishValue\r\n            } else {\r\n                return currentValue === startValue\r\n            }\r\n        }\r\n\r\n    }\r\n    const disableResetButton = () => {\r\n        if (autoPlayOption) {\r\n            if (conditionOfWork === 'increase') {\r\n                if (currentValue === startValue) return true\r\n                else return false\r\n            } else {\r\n                if (currentValue === finishValue) return true\r\n                else return false\r\n            }\r\n        }\r\n        if (conditionOfWork === '') {\r\n            return true\r\n        } else if (conditionOfWork === 'increase') {\r\n            return currentValue === startValue\r\n        } else {\r\n            return currentValue === finishValue\r\n        }\r\n    }\r\n    const disableSettingsButton = () => {\r\n        if (autoPlayOption) {\r\n            return disableButtonWhenWorkingAutoplay();\r\n        }\r\n        return false\r\n    }\r\n\r\n    const finishValueForArea = () => {\r\n        if (conditionOfWork === 'increase') {\r\n            return finishValue\r\n        } else {\r\n            return startValue\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.counter}>\r\n            <Area\r\n                maxValue={finishValueForArea()}\r\n                classMaxValue={s.red}\r\n                value={currentValue}\r\n            />\r\n            <div className={s.buttons}>\r\n                <Button\r\n                    clName={s.action}\r\n                    disabled={disableActionButton()}\r\n                    title={conditionOfWork}\r\n                    callback={changeValue}\r\n                    autoPlayOption={autoPlayOption}\r\n                />\r\n                <Button\r\n                    clName={s.reset}\r\n                    disabled={disableResetButton()}\r\n                    title={'reset'}\r\n                    callback={resetValue}\r\n                />\r\n                <Button\r\n                    clName={s.settings}\r\n                    title={'settings'}\r\n                    callback={toggleModeModal}\r\n                    disabled={disableSettingsButton()}\r\n                />\r\n            </div>\r\n            {modeModal && <ModalWindow\r\n                modeModal={modeModal}\r\n                setModal={toggleModeModal}\r\n                startValue={startValue}\r\n                setStartValue={setStartValue}\r\n                finishValue={finishValue}\r\n                setFinishValue={setFinishValue}\r\n                optionOfWork={optionOfWork}\r\n                conditionOfWork={conditionOfWork}\r\n                setConditionOfWork={setConditionOfWork}\r\n                autoPlayOption={autoPlayOption}\r\n                setAutoPlayOption={setAutoPlayOption}\r\n            />}\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport {Counter} from \"./Counter/Counter\";\nimport {HashRouter} from \"react-router-dom\";\n\n\n\nfunction App() {\n    return (\n        <HashRouter>\n            <div className=\"App\">\n                <Counter/>\n            </div>\n        </HashRouter>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}