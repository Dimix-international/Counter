{"version":3,"sources":["Counter/Components/ModalWindow/ModalWindow.module.css","Counter/Components/SuperSelect/SuperSelect.module.css","Counter/Counter.module.css","Counter/Components/AutoPlay/AutoPlay.module.css","Counter/Components/Button/Button.module.css","Counter/Components/SuperInput/SuperInput.module.css","Counter/Components/Area/Area.module.css","Counter/Redux/actions.ts","Counter/Components/Area/Area.tsx","Counter/Components/Button/Button.tsx","Counter/Components/SuperInput/SuperInput.tsx","Counter/Components/SuperSelect/SuperSelect.tsx","Counter/Components/AutoPlay/AutoPlay.tsx","Counter/Components/ModalWindow/ModalWindow.tsx","Counter/Components/ModalWindow/ModalWindowContainer.tsx","Counter/Counter.tsx","Counter/CounterContainer.tsx","App.tsx","reportWebVitals.ts","Counter/Redux/counter_reducer.ts","Counter/Redux/store.ts","Counter/utils/localStorage_util.ts","index.tsx"],"names":["module","exports","ACTIONS_TYPE","Area","React","memo","props","maxValue","classMaxValue","value","finalClass","s","area","className","Button","clName","disabled","title","callback","autoPlayOption","btn","onClick","play","setCurrentValueAC","currentValue","type","SET_CURRENT_VALUE","increaseCurrentValueAC","INCREASE_CURRENT_VALUE","decreaseCurrentValueAC","DECREASE_CURRENT_VALUE","SuperInput","error","setError","useState","tempValue","setTempValue","finallyClass","input","onChange","e","currentTarget","isFinite","Number","data-name","dataName","SuperSelect","data","startMode","hoverElementID","setHoverElementID","active","setActive","selectedItem","find","d","hoveredItem","useEffect","finalClassSelect","select","finalClassSelectTitle","item","tabIndex","onBlur","body","map","hover","onMouseEnter","id","AutoPlay","startValueAutoPlay","advise","setAdvise","container","onMouseLeave","ModalWindow","onKeyPress","closeModal","start","finish","onChangeValue","autoPlay","setAutoPlay","optionOfWork","conditionOfWork","setConditionOfWork","setData","onKeyUp","modal","dialog","header","header__content","close","data__title","mode","mode__title","btn__accept","ModalWindowContainer","setModal","startValue","finishValue","setStart","setFinish","condition","setCondition","useSelector","state","counter","optionsOfWork","dispatch","useDispatch","useCallback","element","dataset","name","GENERAL_SETTINGS","payload","setupSettingAC","key","Counter","changeValue","resetValue","modeModal","setModeModal","toggleModeModal","document","classList","add","body_lock","disableButtonWhenWorkingAutoplay","useMemo","disableActionButton","disableSettingsButton","disableResetButton","finishValueForArea","red","buttons","action","reset","settings","CounterContainer","intervalIdForTimer","setIntervalIdForTimer","autoplayMode","setAutoPlayMode","intervalId","window","setInterval","clearInterval","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","rootReducer","combineReducers","SET_START_VALUE","SET_FINISH_VALUE","SET_AUTOPLAY_OPTION","SET_CONDITION_OF_WORK","store","createStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.147f856e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"ModalWindow_modal__2QOLI\",\"dialog\":\"ModalWindow_dialog__wQoMK\",\"header__content\":\"ModalWindow_header__content__1oSQa\",\"data\":\"ModalWindow_data__2teap\",\"data__title\":\"ModalWindow_data__title__3LKdC\",\"title\":\"ModalWindow_title__1z4dT\",\"close\":\"ModalWindow_close__j1cLi\",\"mode__title\":\"ModalWindow_mode__title__3-qBx\",\"error\":\"ModalWindow_error__225qw\",\"btn__accept\":\"ModalWindow_btn__accept__asEHz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"SuperSelect_select__3xIOr\",\"active\":\"SuperSelect_active__2jOc_\",\"item\":\"SuperSelect_item__3S0LV\",\"title\":\"SuperSelect_title__2jmPo\",\"body\":\"SuperSelect_body__695vW\",\"hover\":\"SuperSelect_hover__2MNRR\",\"none\":\"SuperSelect_none__3FBEe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body_lock\":\"Counter_body_lock__2CbAx\",\"counter\":\"Counter_counter__3Z2WH\",\"buttons\":\"Counter_buttons__7hGFj\",\"red\":\"Counter_red__3sVss\",\"action\":\"Counter_action__1_ddI\",\"reset\":\"Counter_reset__2uU-j\",\"settings\":\"Counter_settings__3qhlP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"AutoPlay_container__3ubi8\",\"play\":\"AutoPlay_play__1_daj\",\"active\":\"AutoPlay_active__3AzF4\",\"advise\":\"AutoPlay_advise__1-v87\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__3cW1B\",\"play\":\"Button_play__1C94W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"SuperInput_error__2qXQ4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"area\":\"Area_area__3K9PX\"};","export enum ACTIONS_TYPE {\n    INCREASE_CURRENT_VALUE = 'INCREASE_CURRENT_VALUE/COUNTER_COMPONENT',\n    DECREASE_CURRENT_VALUE = 'DECREASE_CURRENT_VALUE/COUNTER_COMPONENT',\n    SET_CURRENT_VALUE = 'CHANGE_CURRENT_VALUE/COUNTER_COMPONENT',\n    GENERAL_SETTINGS = 'GENERAL_SETTINGS/COUNTER_COMPONENT',\n    SET_START_VALUE = 'CHANGE_START_VALUE/COUNTER_COMPONENT',\n    SET_FINISH_VALUE = 'CHANGE_FINISH_VALUE/COUNTER_COMPONENT',\n    SET_CONDITION_OF_WORK = 'CHANGE_CONDITION_OF_WORK/COUNTER_COMPONENT',\n    SET_AUTOPLAY_OPTION = 'SET_AUTOPLAY_OPTION/COUNTER_COMPONENT',\n}\n\ntype SetStartValueType = ReturnType<typeof setStartValueAC>\nexport const setStartValueAC = (startValue: number) => {\n    return {\n        type: ACTIONS_TYPE.SET_START_VALUE,\n        startValue,\n    } as const\n}\ntype SetFinishValueType = ReturnType<typeof setFinishValueAC>\nexport const setFinishValueAC = (finishValue: number) => {\n    return {\n        type: ACTIONS_TYPE.SET_FINISH_VALUE,\n        finishValue,\n    } as const\n}\ntype SetCurrentValueType = ReturnType<typeof setCurrentValueAC>\nexport const setCurrentValueAC = (currentValue: number) => {\n    return {\n        type: ACTIONS_TYPE.SET_CURRENT_VALUE,\n        currentValue,\n    } as const\n}\ntype SetAutoPlayOptionType = ReturnType<typeof setAutoPlayOptionAC>\nexport const setAutoPlayOptionAC = (autoPlayOption: boolean) => {\n    return {\n        type: ACTIONS_TYPE.SET_AUTOPLAY_OPTION,\n        autoPlayOption,\n    } as const\n}\ntype SetConditionOfWorkType = ReturnType<typeof setConditionOfWorkAC>\nexport const setConditionOfWorkAC = (conditionOfWork: string) => {\n    return {\n        type: ACTIONS_TYPE.SET_CONDITION_OF_WORK,\n        conditionOfWork,\n    } as const\n}\ntype IncreaseCurrentValueType = ReturnType<typeof increaseCurrentValueAC>\nexport const increaseCurrentValueAC = () => {\n    return {\n        type: ACTIONS_TYPE.INCREASE_CURRENT_VALUE,\n    } as const\n}\ntype DecreaseCurrentValueType = ReturnType<typeof decreaseCurrentValueAC>\nexport const decreaseCurrentValueAC = () => {\n    return {\n        type: ACTIONS_TYPE.DECREASE_CURRENT_VALUE,\n    } as const\n}\ntype SetupSettingType = {\n    type: ACTIONS_TYPE.GENERAL_SETTINGS,\n    payload: {\n        startValue: number,\n        finishValue: number,\n        autoPlayOption: boolean,\n        conditionOfWork: string\n    }\n}\nexport const setupSettingAC = (startValue: number, finishValue: number, autoPlayOption: boolean, conditionOfWork: string): SetupSettingType => {\n    return {\n        type: ACTIONS_TYPE.GENERAL_SETTINGS,\n        payload: {\n            startValue,\n            finishValue,\n            autoPlayOption,\n            conditionOfWork,\n        }\n    }\n}\nexport type ActionCounterType =\n    SetupSettingType\n    | SetStartValueType\n    | SetFinishValueType\n    | SetCurrentValueType\n    | SetAutoPlayOptionType\n    | SetConditionOfWorkType\n    | IncreaseCurrentValueType\n    | DecreaseCurrentValueType\n    ;\n","import React from 'react';\nimport s from \"./Area.module.css\";\n\n\ntype AreaPropsType = {\n    maxValue: number\n    classMaxValue: string\n    value: number\n}\nexport const Area: React.FC<AreaPropsType> = React.memo(props => {\n    const {\n        maxValue,\n        classMaxValue,\n        value,\n    } = props;\n    let finalClass = value === maxValue ? `${s.area} ${classMaxValue}` : `${s.area}`;\n    return (\n        <div className={finalClass}>\n            {value}\n        </div>\n    )\n})","import React from 'react';\nimport s from './Button.module.css'\n\ntype ButtonTypeProps = {\n    clName?: string\n    disabled?: boolean\n    title: string\n    callback: () => void\n    autoPlayOption?: boolean\n}\nexport const Button: React.FC<ButtonTypeProps> = React.memo(props => {\n    const {\n        clName,\n        disabled,\n        title,\n        callback,\n        autoPlayOption,\n    } = props;\n    const changeValue = () => {\n        callback()\n    }\n    const finalClass = clName ? `${s.btn} ${clName}` : s.btn;\n    return (\n        <button className={finalClass} disabled={disabled} onClick={changeValue}>\n            {title}\n            {autoPlayOption && <span className={s.play}> </span>}\n        </button>\n    )\n})","import React, {ChangeEvent, useState} from \"react\";\nimport s from './SuperInput.module.css'\n\ntype SuperInputPropsType = {\n    value: number\n    callback: (e: ChangeEvent<HTMLInputElement>) => void\n    error: boolean\n    setError: (value: boolean) => void\n    dataName?:string\n};\nexport const SuperInput: React.FC<SuperInputPropsType> = React.memo(props => {\n    const {\n        value,\n        callback,\n        error,\n        setError,\n    } = props;\n    const [tempValue, setTempValue] = useState(value);\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        let value = e.currentTarget.value;\n        if (!isFinite(+value) || value === null) return; //проверка на введенное значение\n        setError(false);\n        setTempValue(Number(value));\n        callback(e);\n    }\n\n    const finallyClass = error ? `${s.error} ${s.input}` : s.input;\n    return (\n        <>\n            <input\n                className={finallyClass}\n                type={'text'}\n                onChange={onChangeHandler}\n                value={tempValue}\n                data-name={props.dataName}\n            />\n        </>\n    )\n})","import React, {useState, useEffect} from \"react\";\nimport s from './SuperSelect.module.css'\nimport {OptionsOfWorkType} from \"../../Redux/counter_reducer\";\n\ntype SuperSelectPropsType = {\n    data: Array<OptionsOfWorkType>\n    startMode: string\n    callback: (value: string) => void\n}\nexport const SuperSelect: React.FC<SuperSelectPropsType> = React.memo(props => {\n    const {\n        data,\n        callback,\n        startMode,\n    } = props;\n    const [hoverElementID, setHoverElementID] = useState(startMode);\n    const [active, setActive] = useState(false);\n\n    const selectedItem = data.find(d => d.title === startMode);\n    const hoveredItem = data.find(e => e.title === hoverElementID);\n\n    const toggleActiveOfSelect = () => {\n        setActive(!active);\n    }\n    const turnOffSelect = () => {\n        setActive(false);\n    }\n    const onClickHandler = (title: string) => {\n        callback(title);\n        setActive(false)\n    }\n    useEffect(() => {\n        setHoverElementID(startMode)\n    }, [startMode]);\n\n\n    const finalClassSelect = active ? `${s.select} ${s.active}` : s.select;\n    const finalClassSelectTitle = active ? `${s.title} ${s.item} ${s.active}` : `${s.title} ${s.item}`;\n    return (\n        <div\n            tabIndex={0}\n            className={finalClassSelect}\n            onClick={toggleActiveOfSelect}\n            onBlur={turnOffSelect}\n        >\n            <div className={finalClassSelectTitle}>{selectedItem && selectedItem.title}</div>\n            {active &&\n            <div className={s.body}>\n                {data.map(d => {\n                    return (\n                        <div\n                            key={d.id}\n                            className={d === hoveredItem ? `${s.item} ${s.hover}` : s.item}\n                            onClick={() => onClickHandler(d.title)}\n                            onMouseEnter={() => setHoverElementID(d.title)}\n                        >\n                            {d.title}\n                        </div>\n                    )\n                })}</div>}\n        </div>\n    )\n})","import React, {useState} from \"react\";\nimport s from './AutoPlay.module.css'\n\ntype AutoPlayPropsType = {\n    startValueAutoPlay: boolean\n    callback: (value: boolean) => void\n}\nexport const AutoPlay: React.FC<AutoPlayPropsType> = React.memo(props => {\n    const {\n        startValueAutoPlay,\n        callback,\n    } = props;\n    const [active, setActive] = useState(startValueAutoPlay);\n    const [advise, setAdvise] = useState(false);\n\n\n    const finalClass = active ? `${s.play} ${s.active}` : s.play;\n    const onClickHandler = () => {\n        callback(!active);\n        setActive(!active);\n    }\n    const showAdvise = () => {\n        setAdvise(true)\n    }\n    const closeAdvise = () => {\n        setAdvise(false)\n    }\n    return (\n        <div\n            className={s.container}\n            onMouseLeave={closeAdvise}>\n            <div\n                className={finalClass}\n                onClick={onClickHandler}\n                onMouseEnter={showAdvise}\n            >\n            </div>\n            {advise &&\n            <div className={s.advise}>\n                autoplay\n            </div>\n            }\n        </div>\n    )\n})","import React, {ChangeEvent, KeyboardEvent} from 'react';\nimport s from './ModalWindow.module.css'\nimport {SuperInput} from \"../SuperInput/SuperInput\";\nimport {Button} from \"../Button/Button\";\nimport {SuperSelect} from \"../SuperSelect/SuperSelect\";\nimport {AutoPlay} from \"../AutoPlay/AutoPlay\";\nimport {OptionsOfWorkType} from \"../../Redux/counter_reducer\";\n\ntype ModalWindowPropsType = {\n    onKeyPress: (e: KeyboardEvent<HTMLDivElement>) => void\n    closeModal: () => void\n    start: number\n    finish: number\n    onChangeValue: (e: ChangeEvent<HTMLInputElement>) => void\n    error: boolean\n    setError: (value: boolean) => void\n    autoPlay: boolean\n    setAutoPlay: (value: boolean) => void\n    optionOfWork: Array<OptionsOfWorkType>\n    conditionOfWork: string\n    setConditionOfWork: (value: string) => void\n    setData: () => void\n}\nexport const ModalWindow: React.FC<ModalWindowPropsType> = React.memo((props: ModalWindowPropsType) => {\n    const {\n        onKeyPress,\n        closeModal,\n        start,\n        finish,\n        onChangeValue,\n        error,\n        setError,\n        autoPlay,\n        setAutoPlay,\n        optionOfWork,\n        conditionOfWork,\n        setConditionOfWork,\n        setData,\n    } = props;\n\n    return (\n        <div onKeyUp={onKeyPress} className={`${s.modal}`}>\n            <div className={s.dialog}>\n                <div className={s.header}>\n                    <div className={s.header__content}>\n                        <div className={s.title}>Settings</div>\n                        <div className={s.close} onClick={closeModal}>&times;</div>\n                    </div>\n                </div>\n                <div className={s.body}>\n                    <div className={s.data}>\n                        <div className={s.data__title}>Start number</div>\n                        <SuperInput\n                            value={start}\n                            callback={onChangeValue}\n                            error={error}\n                            setError={setError}\n                            dataName={'startValue'}\n                        />\n                        <div className={s.data__title}>End number</div>\n                        <SuperInput\n                            value={finish}\n                            callback={onChangeValue}\n                            error={error}\n                            setError={setError}\n                            dataName={'finishValue'}\n                        />\n                    </div>\n                    <div className={s.mode}>\n                        <div className={s.mode__title}>\n                            <div>Choose mode</div>\n                            <AutoPlay\n                                startValueAutoPlay={autoPlay}\n                                callback={setAutoPlay}\n                            />\n                        </div>\n                        <SuperSelect\n                            data={optionOfWork}\n                            startMode={conditionOfWork}\n                            callback={setConditionOfWork}\n                        />\n                    </div>\n                    <Button\n                        clName={s.btn__accept}\n                        title={'Accept'}\n                        callback={setData}\n                        disabled={error}\n                    />\n                </div>\n            </div>\n        </div>\n    )\n})","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Dispatch} from \"redux\";\nimport {setupSettingAC} from \"../../Redux/actions\";\nimport {RootReducerType} from \"../../Redux/store\";\nimport {OptionsOfWorkType} from \"../../Redux/counter_reducer\";\nimport {ModalWindow} from \"./ModalWindow\";\n\n\ntype ModalWindowContainerPropsType = {\n    setModal: () => void\n    startValue: number\n    finishValue: number\n    autoPlayOption: boolean\n    conditionOfWork: string\n}\nexport const ModalWindowContainer = React.memo((props: ModalWindowContainerPropsType) => {\n    const {\n        setModal,\n        startValue,\n        finishValue,\n        autoPlayOption,\n        conditionOfWork\n    } = props;\n\n    const [start, setStart] = useState(startValue);\n    const [finish, setFinish] = useState(finishValue);\n    const [autoPlay, setAutoPlay] = useState(autoPlayOption);\n    const [condition, setCondition] = useState(conditionOfWork);\n    const [error, setError] = useState(false);\n\n    const optionOfWork = useSelector<RootReducerType, Array<OptionsOfWorkType>>(state => state.counter.optionsOfWork);\n    let dispatch = useDispatch<Dispatch>();\n\n    const onChangeValue = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        let element = e.currentTarget;\n        if (e.currentTarget.dataset.name) {\n            const trigger: string = e.currentTarget.dataset.name;\n            if (trigger === 'startValue') {\n                setStart(Number(element.value))\n            } else {\n                setFinish(Number(element.value))\n            }\n        }\n    }, [])\n\n    const closeModal = useCallback(() => {\n        setModal();\n    }, [setModal])\n\n    const setData = useCallback(() => {\n        if (start < 0 || start === finish || start > finish) {\n            setError(true);\n            return\n        }\n        setError(false);\n        dispatch(setupSettingAC(start, finish, autoPlay, condition));\n        setModal();\n    }, [start, finish, condition, autoPlay, dispatch, setModal])\n\n    const onKeyPress = useCallback((e: KeyboardEvent<HTMLDivElement>) => {\n        switch (e.key) {\n            case 'Escape':\n                closeModal()\n                break;\n            case 'Enter':\n                setData();\n                break;\n            default:\n                return\n        }\n    }, [closeModal, setData])\n\n    return (\n        <ModalWindow\n            onKeyPress={onKeyPress}\n            closeModal={closeModal}\n            start={start}\n            finish={finish}\n            onChangeValue={onChangeValue}\n            error={error}\n            setError={setError}\n            autoPlay={autoPlay}\n            setAutoPlay={setAutoPlay}\n            optionOfWork={optionOfWork}\n            conditionOfWork={condition}\n            setConditionOfWork={setCondition}\n            setData={setData}\n        />\n    )\n})","import React, {useCallback, useEffect, useMemo, useState} from 'react';\nimport s from './Counter.module.css';\nimport {Area} from \"./Components/Area/Area\";\nimport {Button} from \"./Components/Button/Button\";\nimport {ModalWindowContainer} from \"./Components/ModalWindow/ModalWindowContainer\";\n\ntype CounterPropsType = {\n    startValue: number\n    finishValue: number\n    currentValue: number\n    autoPlayOption: boolean\n    conditionOfWork: string\n    changeValue: () => void\n    resetValue: () => void\n}\nexport const Counter: React.FC<CounterPropsType> = React.memo((props) => {\n    const {\n        startValue,\n        finishValue,\n        currentValue,\n        autoPlayOption,\n        conditionOfWork,\n        changeValue,\n        resetValue,\n    } = props;\n\n    const [modeModal, setModeModal] = useState(false); //открытие/закрытие модального окна\n\n    const toggleModeModal = useCallback(() => {\n        setModeModal(!modeModal)\n    }, [modeModal])\n\n    //блокируем скролл всей страницы, когда открыто модальное окно\n    useEffect(() => {\n        if (modeModal) {\n            document.body.classList.add(s.body_lock)\n        } else {\n            document.body.className = ''\n        }\n    }, [modeModal])\n\n    const disableButtonWhenWorkingAutoplay = useMemo(() => {\n        return currentValue !== finishValue && currentValue !== startValue\n    }, [currentValue, finishValue, startValue])\n\n    const disableActionButton = useMemo(() => {\n        if (autoPlayOption) {\n            if (conditionOfWork === 'increase') {\n                return currentValue === finishValue || disableButtonWhenWorkingAutoplay\n            } else {\n                return currentValue === startValue || disableButtonWhenWorkingAutoplay\n            }\n        } else {\n            if (conditionOfWork === 'increase') {\n                return currentValue === finishValue\n            } else {\n                return currentValue === startValue\n            }\n        }\n    }, [autoPlayOption, conditionOfWork, currentValue, startValue, finishValue, disableButtonWhenWorkingAutoplay]);\n\n    const disableSettingsButton = useMemo(() => {\n        if (autoPlayOption) {\n            return disableButtonWhenWorkingAutoplay;\n        }\n        return false\n    }, [autoPlayOption, disableButtonWhenWorkingAutoplay])\n\n    const disableResetButton = useMemo(() => {\n        if (conditionOfWork === 'increase') {\n            return currentValue === startValue;\n        } else {\n            return currentValue === finishValue\n        }\n    }, [conditionOfWork, currentValue, startValue, finishValue])\n\n\n    const finishValueForArea = useMemo(() => {\n        if (conditionOfWork === 'increase') {\n            return finishValue\n        } else {\n            return startValue\n        }\n    }, [conditionOfWork, finishValue, startValue])\n\n    return (\n        <div className={s.counter}>\n            <Area\n                maxValue={finishValueForArea}\n                classMaxValue={s.red}\n                value={currentValue}\n            />\n            <div className={s.buttons}>\n                <Button\n                    clName={s.action}\n                    disabled={disableActionButton}\n                    title={conditionOfWork}\n                    callback={changeValue}\n                    autoPlayOption={autoPlayOption}\n                />\n                <Button\n                    clName={s.reset}\n                    disabled={disableResetButton}\n                    title={'reset'}\n                    callback={resetValue}\n                />\n                <Button\n                    clName={s.settings}\n                    title={'settings'}\n                    callback={toggleModeModal}\n                    disabled={disableSettingsButton}\n                />\n            </div>\n            {modeModal && <ModalWindowContainer\n                setModal={toggleModeModal}\n                startValue={startValue}\n                finishValue={finishValue}\n                autoPlayOption={autoPlayOption}\n                conditionOfWork={conditionOfWork}\n            />}\n        </div>\n    )\n})","import {Counter} from \"./Counter\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"./Redux/store\";\r\nimport {decreaseCurrentValueAC, increaseCurrentValueAC, setCurrentValueAC} from \"./Redux/actions\";\r\nimport React, {useCallback, useEffect, useState} from \"react\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nexport const CounterContainer = React.memo(() => {\r\n    const startValue = useSelector<RootReducerType, number>(state => state.counter.startValue)\r\n    const finishValue = useSelector<RootReducerType, number>(state => state.counter.finishValue)\r\n    const currentValue = useSelector<RootReducerType, number>(state => state.counter.currentValue)\r\n    const conditionOfWork = useSelector<RootReducerType, string>(state => state.counter.conditionOfWork)\r\n    const autoPlayOption = useSelector<RootReducerType, boolean>(state => state.counter.autoPlayOption)\r\n\r\n    const [intervalIdForTimer, setIntervalIdForTimer] = useState(0)\r\n    const [autoplayMode, setAutoPlayMode] = useState(false); //для запуска useEffect\r\n\r\n\r\n    let dispatch = useDispatch<Dispatch>();\r\n\r\n    useEffect(() => {\r\n        if (autoplayMode) {\r\n            let intervalId: number = window.setInterval(() => {\r\n                if (conditionOfWork === 'decrease') {\r\n                    if (currentValue > startValue) {\r\n                        dispatch(decreaseCurrentValueAC());\r\n                    } else {\r\n                        clearInterval(intervalId)\r\n                        setAutoPlayMode(false);\r\n                    }\r\n                } else {\r\n                    if (currentValue < finishValue) {\r\n                        dispatch(increaseCurrentValueAC());\r\n                    } else {\r\n                        clearInterval(intervalId);\r\n                        setAutoPlayMode(false);\r\n                    }\r\n                }\r\n            }, 1000)\r\n            setIntervalIdForTimer(intervalId);\r\n            return () => {\r\n                clearInterval(intervalId);\r\n            }\r\n        }\r\n    }, [autoPlayOption, autoplayMode, currentValue, startValue, finishValue, conditionOfWork, dispatch])\r\n\r\n    useEffect(() => {\r\n        dispatch(setCurrentValueAC(conditionOfWork === 'decrease' ? finishValue : startValue))\r\n    }, [startValue, finishValue, conditionOfWork, dispatch])\r\n\r\n    const changeValue = useCallback(() => {\r\n        if (autoPlayOption) {\r\n            setAutoPlayMode(true)\r\n        } else {\r\n            if (conditionOfWork === 'decrease') {\r\n                dispatch(decreaseCurrentValueAC())\r\n            } else {\r\n                dispatch(increaseCurrentValueAC())\r\n            }\r\n        }\r\n    }, [autoPlayOption, conditionOfWork, dispatch])\r\n\r\n    const resetValue = useCallback(() => {\r\n        if (autoPlayOption) {\r\n            clearInterval(intervalIdForTimer);\r\n            setAutoPlayMode(false)\r\n        }\r\n        if (conditionOfWork === 'decrease') {\r\n            dispatch(setCurrentValueAC(finishValue))\r\n        } else {\r\n            dispatch(setCurrentValueAC(startValue))\r\n        }\r\n    }, [conditionOfWork, intervalIdForTimer, autoPlayOption, startValue, finishValue, dispatch])\r\n\r\n    return (\r\n        <Counter\r\n            startValue={startValue}\r\n            finishValue={finishValue}\r\n            currentValue={currentValue}\r\n            autoPlayOption={autoPlayOption}\r\n            conditionOfWork={conditionOfWork}\r\n            changeValue={changeValue}\r\n            resetValue={resetValue}\r\n        />\r\n    )\r\n})","import React from 'react';\nimport './App.css';\nimport {CounterContainer} from \"./Counter/CounterContainer\";\n\n\nexport const App = () => {\n    return (\n        <div className=\"App\">\n            <CounterContainer/>\n        </div>\n    );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {ACTIONS_TYPE, ActionCounterType} from \"./actions\";\n\nexport type OptionsOfWorkType = {\n    id:number,\n    title:string\n}\nconst initialState = {\n    startValue:0,\n    finishValue:5,\n    currentValue:0,\n    modeModal:false,\n    autoPlayOption:false,\n    optionsOfWork: [\n        {id: 1, title: 'increase'},\n        {id: 2, title: 'decrease'}\n    ] as Array<OptionsOfWorkType>,\n    conditionOfWork:'increase'\n}\nexport type InitialStateType = typeof initialState;\nexport const counterReducer = (state:InitialStateType = initialState, action:ActionCounterType):InitialStateType => {\n    switch (action.type){\n        case ACTIONS_TYPE.SET_START_VALUE: {\n            return {\n                ...state,\n                startValue:action.startValue\n            }\n        }\n        case ACTIONS_TYPE.SET_FINISH_VALUE: {\n            return {\n                ...state,\n                finishValue:action.finishValue\n            }\n        }\n        case ACTIONS_TYPE.SET_CURRENT_VALUE:\n            return{\n                ...state,\n                currentValue:action.currentValue\n            }\n        case ACTIONS_TYPE.SET_AUTOPLAY_OPTION:\n            return {\n                ...state,\n                autoPlayOption: action.autoPlayOption\n            }\n        case ACTIONS_TYPE.SET_CONDITION_OF_WORK:\n            return {\n                ...state,\n                conditionOfWork:action.conditionOfWork\n            }\n        case ACTIONS_TYPE.GENERAL_SETTINGS: {\n            if(action.payload.conditionOfWork === 'increase') {\n                return {\n                    ...state,\n                    ...action.payload,\n                    currentValue: action.payload.startValue\n                }\n            } else{\n                return {\n                    ...state,\n                    ...action.payload,\n                    currentValue: action.payload.finishValue\n                }\n            }\n        }\n        case ACTIONS_TYPE.INCREASE_CURRENT_VALUE:\n            return {\n                ...state,\n                currentValue: state.currentValue + 1\n            }\n        case ACTIONS_TYPE.DECREASE_CURRENT_VALUE:\n            return {\n                ...state,\n                currentValue: state.currentValue - 1\n            }\n        default:\n            return state\n    }\n}","import {combineReducers, createStore, Store} from \"redux\";\nimport {counterReducer} from \"./counter_reducer\";\nimport {loadState, saveState} from \"../utils/localStorage_util\";\n\nlet rootReducer = combineReducers({\n    counter: counterReducer\n});\n\nexport type RootReducerType = ReturnType<typeof rootReducer>;\nexport let store: Store<RootReducerType, any> = createStore(rootReducer, loadState());\n\nstore.subscribe(() => {\n    saveState({\n        counter: store.getState().counter\n    })\n})","import {RootReducerType} from \"../Redux/store\";\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('counter-state');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\nexport const saveState = (state:RootReducerType) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('counter-state', serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from './Counter/Redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App/>\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}