{"version":3,"sources":["Counter/Button/Button.module.css","Counter/Area/Area.tsx","Counter/Button/Button.tsx","Counter/Counter.tsx","App.tsx","reportWebVitals.ts","index.tsx","Counter/Counter.module.css","Counter/Area/Area.module.css"],"names":["module","exports","Area","maxValue","classMaxValue","value","finalClass","s","area","className","Button","disabled","title","callback","btn","onClick","Counter","useState","setValue","red","counter","buttons","addValue","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oGACAA,EAAOC,QAAU,CAAC,IAAM,sB,mLCQXC,EAA+B,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,SAASC,EAA0B,EAA1BA,cAAcC,EAAY,EAAZA,MAC7DC,EAAaD,IAAUF,EAAV,UAAwBI,IAAEC,KAA1B,YAAkCJ,GAAlC,UAAuDG,IAAEC,MAC1E,OACI,qBAAKC,UAAWH,EAAhB,SACKD,K,iBCLAK,EAAoC,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,SAAUC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SAIhE,OACI,wBAAQJ,UAAWF,IAAEO,IAAKH,SAAUA,EAAUI,QAJ9B,WAChBF,KAGA,SAAqED,KCPhEI,EAAU,WACnB,IADyB,EAICC,mBAFP,GAFM,mBAIlBZ,EAJkB,KAIXa,EAJW,KAenBd,EAAgBG,IAAEY,IACxB,OACI,sBAAKV,UAAWF,IAAEa,QAAlB,UACI,cAAC,EAAD,CACIjB,SAlBK,EAmBLC,cAAeA,EACfC,MAAOA,IAEX,sBAAKI,UAAWF,IAAEc,QAAlB,UACI,cAAC,EAAD,CACIV,SAxBC,IAwBSN,EACVO,MAAO,MACPC,SAAU,kBArBT,SAACR,GACXA,GANU,GAOTa,EAASb,EAAQ,GAmBOiB,CAASjB,MAE7B,cAAC,EAAD,CACIM,SA5BG,IA4BON,EACVO,MAAO,QACPC,SApBG,WACfK,EAXe,a,QCQRK,MAVf,WACE,OACI,cAAC,IAAD,UACI,qBAAKd,UAAU,MAAf,SACI,cAAC,EAAD,SCICe,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAxB,EAAOC,QAAU,CAAC,QAAU,yBAAyB,QAAU,yBAAyB,IAAM,uB,kBCA9FD,EAAOC,QAAU,CAAC,KAAO,sB","file":"static/js/main.217ffa81.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__1_Jlx\"};","import React from 'react';\r\nimport s from \"./Area.module.css\";\r\n\r\n\r\ntype AreaPropsType = {\r\n    maxValue: number\r\n    classMaxValue: string\r\n    value: number\r\n}\r\nexport const Area:React.FC<AreaPropsType> = ({maxValue,classMaxValue,value,}) => {\r\n    let finalClass = value === maxValue ? `${s.area} ${classMaxValue}` : `${s.area}`;\r\n    return (\r\n        <div className={finalClass}>\r\n            {value}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Button.module.css'\r\n\r\ntype ButtonTypeProps = {\r\n    disabled: boolean\r\n    title: string\r\n    callback: () => void\r\n}\r\nexport const Button: React.FC<ButtonTypeProps> = ({disabled, title, callback}) => {\r\n    const changeValue = () => {\r\n        callback()\r\n    }\r\n    return (\r\n        <button className={s.btn} disabled={disabled} onClick={changeValue}>{title}</button>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport s from './Counter.module.css';\r\nimport {Area} from \"./Area/Area\";\r\nimport {Button} from \"./Button/Button\";\r\n\r\n\r\nexport const Counter = () => {\r\n    const maxValue = 5;\r\n    const startValue = 0;\r\n\r\n    const [value, setValue] = useState<number>(startValue);\r\n\r\n    const addValue = (value: number) => {\r\n        if(value <= maxValue) {\r\n            setValue(value + 1);\r\n            return;\r\n        }\r\n    }\r\n    const resetValue = () => {\r\n        setValue(startValue);\r\n    }\r\n    const classMaxValue = s.red;\r\n    return (\r\n        <div className={s.counter}>\r\n            <Area\r\n                maxValue={maxValue}\r\n                classMaxValue={classMaxValue}\r\n                value={value}\r\n            />\r\n            <div className={s.buttons}>\r\n                <Button\r\n                    disabled={value === maxValue}\r\n                    title={'inc'}\r\n                    callback={() => addValue(value)}\r\n                />\r\n                <Button\r\n                    disabled={value === startValue}\r\n                    title={'reset'}\r\n                    callback={resetValue}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport {Counter} from \"./Counter/Counter\";\nimport {BrowserRouter} from \"react-router-dom\";\n\n\nfunction App() {\n  return (\n      <BrowserRouter>\n          <div className=\"App\">\n              <Counter/>\n          </div>\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__3Z2WH\",\"buttons\":\"Counter_buttons__7hGFj\",\"red\":\"Counter_red__3sVss\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"area\":\"Area_area__Fytjt\"};"],"sourceRoot":""}